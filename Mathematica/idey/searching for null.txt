fuhk_if_Null (x0, x1, x2, n) {
   k=[abs(x0-x1),0]
   dx=abs(x2-x1)/n
   цикл i++ i=[1;n-1]{
      if ((uf(x1+(i-1)*dx))-abs(uf(x1+(i-1)*dx)))/(2*uf(x1+(i-1)*dx))!=(uf(x1+i*dx)-abs(uf(x1+i*dx)))/(2*uf(x1+i*dx)){
         if (abs(uf(x0)-uf(x1+(i-1)*dx))<abs(uf(x0-k[1]))) {k=[uf(x1+(i-1)*dx), uf(x1+i*dx)]}
      }
   }
return(k)
}


если (uf(x_i)+|uf(x_i)|)/2*uf(x_i) != (uf(x(i+1))+|uf(x_(i+1))|)/2*x_(i+1)
то хотя бы один ноль uf(x) находится в интервале [x_i, x_(i+1)]
проверяем на наличие нулей первую половину интервала [x_i, 0.5(x_i+x_(i+1)]
если там есть нули то работаем с этой половиной интервала
если нулей в этой половине нет, то работаем с другой половиной интервала
проверяем модуль разницы границ ||uf(x_i)|-|uf(0.5(x_i+x_(i+1))||, если он меньше заданой нами точности, то x_i искомый ноль, иначе вновь делим интервал на две половины и повторяем предыдущие действия начиная с проверки половинки интервала на нули
наверное стоит проверять на нули сразу обе части, если ноль пропадает сразу в двух, то мы разделили интервал по нулю и тогда рассматривается интервал [0.3(x_i+x_(i+1), 0.7(x_i+x_(i+1)]
